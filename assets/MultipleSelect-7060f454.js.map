{"version":3,"file":"MultipleSelect-7060f454.js","sources":["../../src/Pages/SelectsPage/Components/MultipleSelect/MultipleSelect.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n    Box,\n    Input,\n    InputLabel,\n    MenuItem,\n    FormControl,\n    ListItemText,\n    Select,\n    Checkbox,\n    Chip,\n    useTheme,\n    Theme,\n    SelectChangeEvent,\n} from '@mui/material';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst names = [\n    'Oliver Hansen',\n    'Van Henry',\n    'April Tucker',\n    'Ralph Hubbard',\n    'Omar Alexander',\n    'Carlos Abbott',\n    'Miriam Wagner',\n    'Bradley Wilkerson',\n    'Virginia Andrews',\n    'Kelly Snyder',\n];\n\nfunction getStyles(name: string, personName: string[], { typography }: Theme) {\n    return {\n        fontWeight: personName.indexOf(name) === -1 ? typography.fontWeightRegular : typography.fontWeightMedium,\n    };\n}\n\nfunction MultipleSelect() {\n    const theme = useTheme();\n    const [personName, setPersonName] = React.useState<string[]>([]);\n\n    const handleChange = (event: SelectChangeEvent<string[]>) => {\n        setPersonName(event.target.value as string[]);\n    };\n\n    const handleChangeMultiple = (event: SelectChangeEvent<typeof personName>) => {\n        const {\n            target: { value },\n        } = event;\n\n        setPersonName(\n            // On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(',') : value\n        );\n    };\n\n    return (\n        <div>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n                <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-name-label\"\n                    id=\"demo-mutiple-name\"\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    MenuProps={MenuProps}\n                    multiple\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n                <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-checkbox-label\"\n                    id=\"demo-mutiple-checkbox\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => (selected as string[]).join(', ')}\n                    MenuProps={MenuProps}\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name}>\n                            <Checkbox checked={personName.indexOf(name) > -1} />\n                            <ListItemText primary={name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n                <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-chip-label\"\n                    id=\"demo-mutiple-chip\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input id=\"select-multiple-chip\" />}\n                    renderValue={(selected) => (\n                        <Box display=\"flex\" flexWrap=\"wrap\">\n                            {(selected as string[]).map((value) => (\n                                <Chip sx={{ display: 'flex', flexWrap: 'wrap' }} key={value} label={value} />\n                            ))}\n                        </Box>\n                    )}\n                    MenuProps={MenuProps}\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl sx={{ m: 1, mt: 3, minWidth: 120 }}>\n                <Select\n                    multiple\n                    displayEmpty\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => {\n                        if ((selected as string[]).length === 0) {\n                            return <em>Placeholder</em>;\n                        }\n\n                        return (selected as string[]).join(', ');\n                    }}\n                    MenuProps={MenuProps}\n                    inputProps={{ 'aria-label': 'Without label' }}\n                >\n                    <MenuItem disabled value=\"\">\n                        <em>Placeholder</em>\n                    </MenuItem>\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n                <InputLabel shrink htmlFor=\"select-multiple-native\">\n                    Native\n                </InputLabel>\n                <Select\n                    value={personName}\n                    onChange={handleChangeMultiple}\n                    inputProps={{\n                        id: 'select-multiple-native',\n                    }}\n                    multiple\n                    native\n                >\n                    {names.map((name) => (\n                        <option key={name} value={name}>\n                            {name}\n                        </option>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nexport default MultipleSelect;\n"],"names":["ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","names","getStyles","name","personName","typography","MultipleSelect","theme","useTheme","setPersonName","React","handleChange","event","handleChangeMultiple","value","jsxs","FormControl","jsx","InputLabel","Select","Input","MenuItem","selected","Checkbox","ListItemText","Box","Chip"],"mappings":"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"}